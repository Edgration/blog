{"meta":{"title":"Oranges","subtitle":"be yourself","description":"Welcome","author":"oranges","url":"https://zcheng.site"},"pages":[{"title":"about","date":"2017-11-04T06:39:03.000Z","updated":"2019-07-17T02:32:11.451Z","comments":true,"path":"about/index.html","permalink":"https://zcheng.site/about/index.html","excerpt":"","text":"总结技术或感悟 对自己平时在工作中遇到的技术难点做个记录。 对自己生活的方方面面，点点滴滴做个记录。 对以上两点的总结与感悟？（笑）。 自娱自乐，仅此。 As long as you have a good story and an audience, you are not really finished. The End🙃"},{"title":"categories","date":"2019-05-03T04:06:28.000Z","updated":"2019-07-05T06:02:20.283Z","comments":true,"path":"categories/index.html","permalink":"https://zcheng.site/categories/index.html","excerpt":"","text":""},{"title":"friends","date":"2019-05-03T04:21:26.000Z","updated":"2019-07-05T06:02:20.286Z","comments":true,"path":"friends/index.html","permalink":"https://zcheng.site/friends/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-05-03T04:03:35.000Z","updated":"2019-07-05T06:02:20.331Z","comments":true,"path":"tags/index.html","permalink":"https://zcheng.site/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Vue transition 折叠类动画自动获取隐藏层高度以及手风琴效果bug解决","slug":"vue-transition","date":"2019-07-13T04:37:58.000Z","updated":"2019-07-17T02:32:11.385Z","comments":true,"path":"vue-transition.html","link":"","permalink":"https://zcheng.site/vue-transition.html","excerpt":"","text":"前面要说的话前段时间，在解决左侧导航栏激活问题时，发现折叠动画过渡不是很平滑，并且还伴随着一些bug。使用起来不是很流畅，于是在解决完激活bug后，我决定把动画效果也解决掉。 先来看看要解决的问题，如下图：不知细心的你有没有发现什么问题？当点击折叠展开menu-one栏目的时候没有什么问题，但点击折叠展开mene-two栏目，当动画定格在menu-two-2选项的时候，menu-two-3及以下的部分直接立即完成了过渡。为什么会这样？下面说原因。 上图实现代码：12345678910111213141516&lt;!-- html部分 --&gt;&lt;transition name=\"sub-menu\"&gt; &lt;ul class=\"site-menu-sub\" v-show=\"item.children &amp;&amp; isOpen === aindex\"&gt; &lt;li v-for=\"(child, index) in item.children\" :key=\"index\" class=\"site-menu-item\"&gt; &lt;router-link class=\"animsition-link\" :to=\"`/$&#123;child.href&#125;`\"&gt; &lt;/router-link&gt; &lt;/li&gt; &lt;/ul&gt;&lt;/transition&gt; 123456789101112131415&lt;!-- css部分 --&gt;.site-menu-sub &#123; padding: 0px;&#125;.sub-menu-enter-active,.sub-menu-leave-active &#123; transition: all .3s ease; height: 70px; /* 这里70px为menu-one子菜单的高度 */&#125;.sub-menu-enter,.sub-menu-leave-to&#123; opacity: 0; height: 0px;&#125; 这里因为我把过渡完成时（完全展开时）的height设置为70px，height 从0 ~ 70px 之间完成了过渡，但高于70px的元素就会有问题，高度超出70px部分会立即完成过渡，没有平滑过渡效果。这里我设置的70px高度正好为muen-one展开的高度，这就是为什么menu-one展开折叠没问题，而menu-two会有问题。同样的，如果我把height设置为menu-two展开的高度（210px），那么menu-one展开折叠动画就会有问题。这里我不举例说明，可以自己尝试。 上面的例子能说明： 通过transition动画去控制变化元素高度或者宽度 多个折叠类元素高度或宽度不一样时，不能直接将高或宽写为固定值（写死）。 折叠类元素不确定高或宽的情况下，也不能直接将高或宽写为固定值（写死）。 折衷的解决方案：思路：通过max-height 或 max-width 去控制元素的最大高宽。 为什么叫折衷，因为有缺陷，具体看下面：看出问题来了吗？过渡效果好像变得很快，这是因为max-height设置成了1000px，不过比最开始那个效果要好一点。 折衷解决方案代码：123456789101112131415&lt;!-- css部分 --&gt;.site-menu-sub &#123; padding: 0px;&#125;.sub-menu-enter-active,.sub-menu-leave-active &#123; transition: all .3s ease; max-height: 1000px; /* 这里将最大高度设置为折叠元素不可能超越的高度 比如1000px */&#125;.sub-menu-enter,.sub-menu-leave-to&#123; opacity: 0; max-height: 0px;&#125; html代码部分没有改变，仅仅将height改为max-height了，并且将max-height设置为折叠元素不可能超越的高度。如果max-height设置的太小，比展开后元素高度低。那展开后样式会出现问题，展示不完全。并且这种解决方案没达到最完美效果，代码维护成本也大。 完美的解决方案：先放出效果图： 思路：通过JavaScript 钩子的方式获取隐藏层的高度，动态去改变隐藏层的高度 具体实现方案和代码如下：新建collapse-transition.js（名字自己定义）作为函数式组件被引用，代码如下：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253// collapse-transition.jsconst transitionStyle = '0.3s height ease-in-out';const Transition = &#123; beforeEnter(el) &#123; el.style.transition = transitionStyle; if (!el.dataset) el.dataset = &#123;&#125;; el.style.height = 0; &#125;, enter(el) &#123; if (el.scrollHeight !== 0) &#123; el.style.height = `$&#123;el.scrollHeight&#125;px`; &#125; else &#123; el.style.height = ''; &#125; el.style.overflow = 'hidden'; &#125;, afterEnter(el) &#123; el.style.transition = ''; el.style.height = ''; &#125;, beforeLeave(el) &#123; if (!el.dataset) el.dataset = &#123;&#125;; el.style.height = `$&#123;el.scrollHeight&#125;px`; el.style.overflow = 'hidden'; &#125;, leave(el) &#123; if (el.scrollHeight !== 0) &#123; el.style.transition = transitionStyle; el.style.height = 0; &#125; &#125;, afterLeave(el) &#123; el.style.transition = ''; el.style.height = ''; &#125;,&#125;;export default &#123; name: 'CollapseTransition', functional: true, render(h, &#123; children &#125;) &#123; const data = &#123; on: Transition, &#125;; return h('transition', data, children); &#125;,&#125;; 在需要的页面引入：12345678910&lt;!-- mune.vue页面 --&gt;&lt;script&gt; import CollapseTransition from '@/utils/collapse-transition'; // 本人将collapse-transition.js 放置在工具类utils文件夹 export default &#123; components: &#123; 'collapse-transition': CollapseTransition, &#125;, &#125;;&lt;/script&gt; 使用：12345678910111213141516&lt;!-- mune.vue页面 --&gt; &lt;collapse-transition&gt; &lt;ul class=\"site-menu-sub\" v-show=\"item.children &amp;&amp; isOpen === aindex\"&gt; &lt;li v-for=\"(child, index) in item.children\" :key=\"index\" class=\"site-menu-item\"&gt; &lt;router-link class=\"animsition-link\" :to=\"`/$&#123;child.href&#125;`\"&gt; &lt;/router-link&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/collapse-transition&gt; 之前的css删除，不再需要了。 到这一步自动获取元素高度的问题解决了，可以说是“一劳永逸”了。不管隐藏层高度多高，动画都没有问题。 手风琴模式过渡问题然而看似美好，实则新的问题一直伴随着我们。 不知你们发现了一个问题没，以上实现效果图有个过渡动画bug，就是手风琴模式（只保持一个子菜单的展开）过渡效果没出来。在menu-two展开状态下点击折叠的menu-one，我们发现menu-two直接关闭，而没有过渡动画。 解决方案：1234567// collapse-transition.jsbeforeLeave(el) &#123; if (!el.dataset) el.dataset = &#123;&#125;; el.style.display = 'block'; // 添加这一行 el.style.height = `$&#123;el.scrollHeight&#125;px`; el.style.overflow = 'hidden';&#125;, 在beforeLeave钩子中加入 display: &#39;block&#39; 如上图。 实现效果图： 到这里就彻底解决了vue transition折叠展开过渡动画的问题。 具体参考资料： vuejs如何实现这样的展开收起动画？ vue 官方中文文档-进入/离开 &amp; 列表过渡-JavaScript 钩子 element-ui collapse-transition动画源码 其他说明 gif录制过程中难免出现卡顿掉帧现象，本页面所有效果图不能代表实际实现效果。 gif录制软件ScreenToGif。 The End😀","categories":[],"tags":[{"name":"css","slug":"css","permalink":"https://zcheng.site/tags/css/"},{"name":"vue","slug":"vue","permalink":"https://zcheng.site/tags/vue/"},{"name":"transition","slug":"transition","permalink":"https://zcheng.site/tags/transition/"}]},{"title":"2018年终总结与规划","slug":"2018-summary","date":"2019-02-03T06:19:04.000Z","updated":"2019-07-05T06:02:20.246Z","comments":true,"path":"2018-summary.html","link":"","permalink":"https://zcheng.site/2018-summary.html","excerpt":"","text":"2018年已经过去，回首这一年，对我来说是颇有收获的一年。在这一年里，许多同事给予过我很多帮助，在这里感谢你们。个人技能也在平时不断试错踩坑的过程中得到了一定的提升。同时这一年也是值得深思的一年，思考自己在各方面还有哪些不足，反省自己在工作中的弊病。 这一年以来，从写demo到对接页面数据，慢慢理解了前后端分离的项目，自己前端代码书写能力也开始有了一定的提升；从只写前端到接触后端，开始对后端逻辑产生兴趣，不再仅仅局限于前端页面的编写，自己也开始能为前端提供数据接口，从完全不熟悉业务到慢慢熟悉业务，明白一个合格的程序员不应该仅仅只投入于技术，也应该熟悉项目与产品相关的东西，明白自己到底做的是什么，思考如何才能满足用户的需求，这样才能打造更好的产品。 工作：这一年，从搭建后台管理系统到现在，启用了数据爬虫，辅助人工采集数据，弥补了人工收集数据的短板；也优化了抽检流程，根据抽检链接自动爬取不合格企业数据，替代了人工收集数据的流程。现在的系统基本能为质量舆情做数据展现，数据采集，数据审核的数据管理功能。相较于以前的数据管理模式，便利性有了不小的提升。质量舆情系统功能也在不断的完善中，页面整体样式得到了优化，系统整体响应速度得到了提升。苏州系统也进行了优化，解决了诸多数据异常bug，增加了部分功能，改善了页面展示效果。高质量发展可视化系统指标数据收集、计算以及数据接口的提供。以上是我这一年工作的大概。通过这些，我认识到一个称职的开发人员应当具有良好的语言表达能力、扎实的技术能力、较强的逻辑处理能力、灵活的应变问题能力、有效的对外联系能力。 思想：1、在有扎实基础的前提下努力提升技术：现在技术更新换代很快，每隔一段时间都会有新的语言、框架、思想产生，通过学习最新的，先进的技术和思想，才不会被这个行业淘汰。2、善用工具：磨刀不误砍柴工，打造好自己的工具集非常重要。每个人都有自己的习惯，在日常工作中能够熟练的使用自己喜欢的工具和掌握一些运用技巧，能大大提高工作效率。3、过得去的英语：程序员这个职位无时无刻都在跟英文打交道，就连最基本的命名变量都是英文，基本所有技术文档都有英文而不一定有中文，所以具备一定的英文词汇量很有必要。4、良好的编码习惯：代码是给人阅读与维护的，维护者可能是别人也可能是自己。良好的代码规范，必要的、清晰的注释可以提升工作效率，也可以让维护者保持好的心情。5、写博客总结技术或感悟：写一篇好的博客很难，首先需要自己弄懂这些知识点，然后还要用代码把demo 写出来，最后，需要构思文章结构，如何用通俗易懂的文字写出来才能让其他人看懂，不过这些是很值得的。一些技术点，时间久了可能会忘记，以博客的形式写出来，会让我记忆更深刻。写博客不仅仅是我自己总结和沉淀技术，同时也会帮助其他开发者。更重要的能养成写作的习惯，还能熟悉搭建网站的流程。 自己的不足：1、沟通与交流方面：曾因不善表达导致工作汇报效果大打折扣，也因沟通不及时导致代码出过bug。2、持续学习方面：因为惰性，年初决定看完的五本书，到现在才看完一本。平时定下的计划也都没有按时完成，部分都搁置了。3、思想方面：平时不够自信，独立完成功能时总觉得自己完成不了，在多人协作时就觉得能完成。缺少思考，缺乏业务知识，对公司项目不够理解，难以深入去解读与开发功能。 未来：2018已经成为过去，2019年整装待发，为自己制定新的目标，同时也要去完成2018年未完成的目标。技术方面，打好基础，任何新的语言、框架、思想的产生都离不开基础知识，拥有扎实的基础能更容易理解新的东西；学好现有技术，理解技术思想。提升业务能力，业务对我这个只会敲击键盘的程序员来说，算是很陌生了。但通过这一年的工作，我明白业务的重要性，在开发过程中能清楚的明白业务，明白工作目的，就能思考如何才能做的更好，如何做出对客户来说合格的产品，而不是只追求快速实现功能。保持学习态度，提升硬实力的同时也要提升软实力，培养读书的兴趣，即便是带有功利性质的去读书，我相信也能收获良多。提升汇报沟通能力，阅读相关书籍，提升自信，保持良好的作息习惯，生活和工作平衡。 最后，祝愿公司越来越好，也希望自己也越来越好！ The End😀","categories":[],"tags":[{"name":"总结","slug":"总结","permalink":"https://zcheng.site/tags/总结/"}]},{"title":"js实现图片转换为Base64","slug":"phototobase64","date":"2018-12-12T09:19:52.000Z","updated":"2019-07-17T02:32:11.349Z","comments":true,"path":"phototobase64.html","link":"","permalink":"https://zcheng.site/phototobase64.html","excerpt":"","text":"Base64是一种基于64个可打印字符来表示二进制数据的表示方法。常用于在通常处理文本数据的场合，表示、传输、存储一些二进制数据，包括MIME的电子邮件及XML的一些复杂数据。 上传图片1&lt;input type=\"file\" class=\"form-control\" name=\"photo\" placeholder=\"图片\" @change=\"getFile($event)\"/&gt; 获取图片1234// 获取图片并调用deal()将图片转换为Base64getFile(event) &#123; this.deal(event.target.files[0])&#125;, 转换成Base64123456789101112131415161718deal(photo) &#123; // 判断支不支持FileReader if (!photo || !window.FileReader) &#123; alert('未选择图片或不支持上传图片！') &#125; // 判断上传的文件是否是图片格式 if (/^image/.test(photo.type)) &#123; //创建一个reader let reader = new FileReader(); //将图片转成base64格式 reader.readAsDataURL(photo); reader.onload = function() &#123; base64_photo = reader.result; // base64_photo是转换好的结果 &#125; &#125; else &#123; alert('请选择一张图片！'); &#125;&#125;, 注意事项 base64_photo在reader.onload函数中，而reader.onload又在deal函数中，形成闭包，所以在外部无法访问到base64_photo，想在外部引用base64_photo就要另辟蹊径 在这里提供一个方法，可以将base64_photo定义为全局变量，这样就能在函数外部访问到 12345// 全局变量与局部变量let base64_photo = ''; // 全局变量function a() &#123; let base64_photo = ''; // 局部变量&#125; The End😀","categories":[],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://zcheng.site/tags/javascript/"}]},{"title":"GitHub与GitLab同时使用ssh key的解决方案","slug":"sshkeys","date":"2018-08-09T04:23:41.000Z","updated":"2019-07-17T02:32:11.379Z","comments":true,"path":"sshkeys.html","link":"","permalink":"https://zcheng.site/sshkeys.html","excerpt":"","text":"前面要说的话设置sshkey的目的是“免去每次提交代码都需要输入账号和密码”的操作，能更快速的提交或者部署项目。 确保你安装了Git确保在linux环境下（windows下需安装windows版本的git，然后打开桌面右键菜单打开gitbash同样适用） 首先，GitHub与GitLab不同的是他们的注册的邮箱肯定是不一样的GitHub使用的是私人邮箱，最常见的比如qq邮箱GitLab使用的是企业邮箱，也就是你公司的邮箱 Let’s do it😀 然后根据两者不同的邮箱分别去生成不同的sshkey 根据GitHub邮箱生成sshkey12$ cd ~$ ssh-keygen -t rsa -C \"your_name@github.com\"（此处填写你的GitHub绑定的邮箱） 接着会出现类似如下信息： Generating public/private rsa key pair.Enter file in which to save the key (/home/user_name/.ssh/id_rsa): 此时输出一个名称，最好有意义的名称，比如：rsa_github, 如果不输入则默认为id_rsa接着会出现： Enter passphrase (empty for no passphrase): =&gt; 提示你输入密码（我一般会留空）==&gt;回车即可Enter same passphrase again: =&gt; 提示再次输入密码 ==&gt;回车即可 最后会出现： Generating public/private rsa key pair. Enter file in which to save the key (/home/user_name/.ssh/id_rsa): rsa_github Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in rsa_github. Your public key has been saved in rsa_github.pub. The key fingerprint is: SHA256:zUXma9igea9llTvtRqLd+LzUQhoXuKWAWr24C3+W5Z0 your_name@github .com The key’s randomart image is: +—[RSA 2048]—-+ | o | | o + . | | o + + o | | o B = o | | . S B = | | o o.*.oo| | . . +=++Bo| | o .++o E=o| | oo. +=| +—-[SHA256]—–+ 这样就生成了rsa_github，注意上面信息中标黄色的字，表示生成的key所在目录。接下来我们要查看生成的rsa_github，将里面的内容复制粘贴到github里面去。查看rsa_github：12$ cd ~/.ssh$ cat rsa_github.pub 出现的信息复制粘贴到GitHub即可，如下:到这里，GitHub的sshkey已经添加成功，可以正常使用了。 根据GitLab邮箱生成sshkey步骤基本与生成GitHub sshkey类似，稍有不同，理解每一步的含义很重要 12$ cd ~$ ssh-keygen -t rsa -C \"your_name@gitlab.com\" （此处填写你的GitLab绑定的邮箱，一般为企业邮箱） 在出现的信息后面输入与github区分的名称，比如rsa_gitlab,接着直接回车即可 这样就会在~/.ssh目录下生成两个新文件：rsa_gitlab 和 rsa_gitlab.pub 12$ cd ~/.ssh$ cat rsa_gitlab.pub 复制出现的信息，粘贴到你的GitLab的sshkey页面上，如下：OK,此时已经成功添加了两者的sshkey,但我们还需要一些配置去使用它。 配置配置是为了让github与gitlab能够区分他们各自的sshkey，所以需要创建一个config文件来管理sshkeys 123$ cd ~/.ssh/$ touch config$ sudo vim config 在config里面加上以下内容：# githubHost github.comHostName github.comPreferredAuthentications publickeyIdentityFile ~/.ssh/rsa_github# gitlabHost gitlab.company&#39;s web site.comHostName gitlab.company&#39;s web site.comPreferredAuthentications publickeyIdentityFile ~/.ssh/rsa_gitlab 注：标注的地方根据自己实际情况进行修改. 现在你应该能正常使用了The End😀","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"https://zcheng.site/tags/linux/"},{"name":"git","slug":"git","permalink":"https://zcheng.site/tags/git/"}]},{"title":"三河古镇","slug":"Sanhe","date":"2018-07-06T07:38:22.000Z","updated":"2019-07-17T02:32:11.326Z","comments":true,"path":"Sanhe.html","link":"","permalink":"https://zcheng.site/Sanhe.html","excerpt":"","text":"二〇〇八年五月二十号(oﾟvﾟ)ノ 👣一次偶然的机会(亲姐姐出嫁;-)，让我有机会到安徽省合肥市肥西县–三河古镇。怎么去的？自驾游，全程高速，花了大概半天不到吧（从武汉到合肥—5个小时左右）。 👣本人全程大部分时间在睡觉（起床实在是太早!），不过也留意过车窗外的风景，大部分路段都盘延在青山间，这作为家乡是一览无余平原的博主还是很稀罕的。偶尔大山里有几户人家，小楼房安插在山腰间，有炊烟升起，又忽然觉得是大山里的云雾，很是迷幻。在山腰间总能看到一排排整整齐齐的“杂草”，就好奇“杂草”怎么能长的如此有规则。后来才了解到这是大山里的人们种的茶树。到了英山县（茶叶之乡），这种景象显得更为频繁了。大山里的茶树，吸收了大山的灵气，固然就神奇而出名了。❤(网上找了张图，因为只是经过英山，没有拍摄照片) 👣后来一路颠簸，终于到了。是一个小酒楼，看来是要吃饭了。心里一阵窃喜，正好肚子饿了。出门迎接我们的是亲家公和亲家母了，我们上了楼，过了许久，一桌子的菜才终于到齐了（菜：一家子就需要整整齐齐被吃掉）。 👣吃完了，休息片刻，去仰慕已久的三河古镇转一转吧？ 👣几个人走了几步远就到了三河古镇，我们没有从大门进去，而是选择从离我们比较近的侧门进去的。映入我们眼帘的是一条街，类似小吃街的那种，人还蛮多的，熙熙攘攘。两边的店铺卖的好像都是本地的特产。 👣景区里的护城河，清风拂柳，很是惬意。👣在附一张巷子👣好了，天不早了，该回去了。期待明天的我姐的婚礼😋。The End😀","categories":[],"tags":[{"name":"旅行","slug":"旅行","permalink":"https://zcheng.site/tags/旅行/"}]},{"title":"Windows10子系统Ubuntu体验","slug":"linux","date":"2018-06-21T02:03:20.000Z","updated":"2019-07-17T02:32:11.332Z","comments":true,"path":"linux.html","link":"","permalink":"https://zcheng.site/linux.html","excerpt":"","text":"Windows10更新到1709（或者更早）版本后，Windows10系统自带了一个linux子系统模块，如果你想换个环境写代码，体验体验Winodws10的子系统，就可以接着往下看 前提(必须) 1.Windows10版本在1709及以上即可 接下来教大家怎么去把玩这个系统👍 1.先进入“控制面板”=&gt;“程序”=&gt;“启用或关闭Windows功能”=&gt;找到“适用于Linux的Windows子系统”=&gt;选中（前面打勾）=&gt;确定, 然后重启电脑。 见下图: 2.重启完毕后打开Windows10自带的应用商店，搜索“ubuntu”，找到下载。等下载完毕后打开，窗口会提示installing(正在安装)，等待几分钟。然后会提示输入用户名和密码，输入你喜欢的用户名和密码即可。 见下图: 你已经安装完子系统，接下来去配置它，让它能够满足日常开发需求并且与Windows完美协作。 1.安装node.js 按照下面依次执行 (参照官方文档) 请注意每一步是否执行成功，否则检查每一步！12$ curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -$ sudo apt-get install -y nodejs 2.安装git 按照下面执行(参照官方文档)1$ apt-get install git 3.（非必须）当然，如果你要玩个人网站(hexo博客等）需要安装hexo(参照官方文档)1$ npm install -g hexo-cli 到这一步，你已经具备了开发环境所必要的工具和包，并且可以通过git拉取代码进行开发了，至于子系统的图形界面，你可以把Windows10作为子系统图形界面进行操作 4.通过下面命令进入Windows目录1$ cd /mnt 5.拉取下来的项目可以随便放在你喜欢的磁盘（C、D、E、F…），通过Windows下的编程工具进行开发(like: Sublime_Text3等) The End😀","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"https://zcheng.site/tags/linux/"},{"name":"工具","slug":"工具","permalink":"https://zcheng.site/tags/工具/"}]},{"title":"“Windows下sublime 安装GitGutter插件无法正常使用”的问题","slug":"second","date":"2018-03-28T11:18:18.000Z","updated":"2019-07-17T02:32:11.373Z","comments":true,"path":"second.html","link":"","permalink":"https://zcheng.site/second.html","excerpt":"","text":"前几日开始使用windows下的子系统，在sublime安装“GitGutter插件”时，Gitgutter 控制台遇到:git -veision [WinError 2] “无法找到指定文件” 想了想，应该是安装成功，没有配置的问题。接下来进入正题： 1.安装git,去官网下载windows版本git =&gt; git官网 2.安装过程，全部下一步。 3.进入sublime =&gt; Preferrences =&gt; Package Settings 然后选择GitGutter =&gt; settings 4.在出现的窗口右边大括号里加上： 1&quot;git_binary&quot;: &quot;D:\\\\Program Files (x86)\\\\Git\\\\bin\\\\git.exe&quot;注意：后面的路径是你刚刚安装的git 的bin路径，替换即可，路径分隔符是’\\\\’双斜线。 重启sublime，你的问题应该得到了解决。The End😀","categories":[],"tags":[{"name":"工具","slug":"工具","permalink":"https://zcheng.site/tags/工具/"},{"name":"sublime","slug":"sublime","permalink":"https://zcheng.site/tags/sublime/"}]},{"title":"Windows10子系统linux“无法访问此网站，localhost 拒绝了我们的连接请求”。","slug":"orange","date":"2018-03-27T16:00:00.000Z","updated":"2019-07-17T02:32:11.342Z","comments":true,"path":"orange.html","link":"","permalink":"https://zcheng.site/orange.html","excerpt":"","text":"作者遇到的这个问题是出现在windows10 linux子系统上的，所以可能只适用以下情况 windows10子系统linux运行服务 执行”hexo s”运行我的hexo博客，并提示服务已运行在”localhost:4000”，如下： 当我访问”localhost:4000”时，却出现“无法访问此网站，localhost 拒绝了我们的连接请求。” 后来查了github上的issues，发现这个问题是电脑上某些软件导致的，tx的wegame的锅，不过tx官方表示会尽快修复，临时解决办法请点击issues，按照官方的方法解决，或者直接卸载wegame，问题应该可以解决。 The End😀","categories":[],"tags":[{"name":"服务","slug":"服务","permalink":"https://zcheng.site/tags/服务/"},{"name":"系统","slug":"系统","permalink":"https://zcheng.site/tags/系统/"}]}]}