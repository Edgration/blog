{"meta":{"title":"Oranges","subtitle":"be yourself","description":"Welcome","author":"oranges","url":"https://zcheng.site"},"pages":[{"title":"about","date":"2017-11-04T06:39:03.000Z","updated":"2020-01-20T02:54:28.762Z","comments":true,"path":"about/index.html","permalink":"https://zcheng.site/about/index.html","excerpt":"","text":"记录生活，随心所欲 🙃"},{"title":"categories","date":"2019-05-03T04:06:28.000Z","updated":"2019-08-15T08:40:23.637Z","comments":true,"path":"categories/index.html","permalink":"https://zcheng.site/categories/index.html","excerpt":"","text":""},{"title":"friends","date":"2019-05-03T04:21:26.000Z","updated":"2019-08-15T08:40:23.641Z","comments":true,"path":"friends/index.html","permalink":"https://zcheng.site/friends/index.html","excerpt":"","text":""},{"title":"","date":"2019-08-15T08:40:23.719Z","updated":"2019-08-15T08:40:23.719Z","comments":true,"path":"private/resume.html","permalink":"https://zcheng.site/private/resume.html","excerpt":"","text":"my resume"},{"title":"tags","date":"2019-05-03T04:03:35.000Z","updated":"2019-08-15T08:40:23.733Z","comments":true,"path":"tags/index.html","permalink":"https://zcheng.site/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"疫情期间的居家生活","slug":"home-life-during-COVID-19","date":"2020-03-25T06:48:35.000Z","updated":"2020-04-06T09:35:59.818Z","comments":true,"path":"home-life-during-COVID-19.html","link":"","permalink":"https://zcheng.site/home-life-during-COVID-19.html","excerpt":"","text":"回家在某些人眼里，我是从武汉“逃”回来的。他们的理由很简单：“武汉的情况都那么严重了，你还要离开武汉，你就不怕把病毒带到其他地方？传染给其他人？一点责任感都没有。为了你的家乡、你的家人，你就应该待在武汉，这样对你对别人都好。”这话放在平时没什么错。但年关将至，身在异乡迫切回家团圆的心情谁能理解？在我看来在规定时间内（武汉封城前，1月23日前）从疫区（这里指的武汉）出来的人，应该清楚的明白自身承担的责任，那就是主动隔离，并且配合政府检查，主动上报自身情况。对那些从武汉回来还抱着侥幸心理，不告知政府，到处串门的人，他们才是真正逃回来的人。要说这次疫情发展的这么严重，“春运”只是导火线，不重视、不关心才是根本原因。 我是在武汉封城的前一天回家的，也就是1月22日。当时武汉大街上已经人人皆口罩了，进车站前还做了简单的体温检测。一路上都没敢懈怠，不敢取下口罩，不敢喝一口水，也不敢跟陌生人讲一句话。 大概2-3小时就到家了（家在湖北省境内）。在家，我也没敢取下口罩（除了睡觉取下来）。一边从网上了解最新疫情，一边给家人做着思想工作，给他们灌输“疫情有多可怕”的思想，希望身边的人都能重视起来，减少接触。当时我这个小乡镇也时有传出有人感染被隔离的消息，并且乡镇、村政府开始封路，每家每户都拉了隔离带，严禁出门。我家还被贴了告示。见下图： 自我隔离当时终南山团队最新研究进展称病毒潜伏期一般情况下为1-14天。并且患者可能无症状，并能传染给其他人。于是我成了这个家的危险源。开始了自主隔离的生活。每天的活动地点是不超过15平米的房间。平时不戴口罩的父母，连睡觉都戴着口罩😂。 居家生活挺过了隔离期，来到了第十五天。身体无恙，天气也转好。上天台晒太阳、玩手机、跟邻居隔楼聊天、还有逗狗。 🌞晒夕阳 🐶给狗剪毛 （前与后），虽然剪的丑🙃 ⛄今天下雪了，堆雪人 🍪去厨房折腾油炸饼（前与后） 水煎包（前与后） 搓麻花 炸土豆条 解封了，出门踏青已是春三月 疫情前后的观念变化学会正确佩戴口罩说来好笑，疫情前，我不会正确佩戴口罩，平时也没怎么戴过口罩。疫情后才发现，口罩的褶皱需要展开才行，并且需要洗净手才能佩戴。在这里我想说，任何东西都是学问，请认真对待，保持尊重！ 戴口罩是负责任的表现疫情期间，我经常看到有报道在国外“中国留学生因外出购餐戴口罩被殴打”之类的新闻。联想到自己过去也对戴一次性医用口罩的人“嗤之以鼻”，认为戴医用口罩就是身体不健康的体现。从小看到戴口罩最多的人是在医院里，于是造成了这种刻板印象。疫情发生后，全国各地随处可见戴口罩的人，甚至自己也不得不被迫戴上口罩来保证自己和他人安全。才明白戴口罩是为自己为别人负责的表现。而不应该受到歧视，反而更应该尊重。 胜利的迹象目前，这场战疫已经有了胜利的迹象，武汉归零已经不远。 The End😀","categories":[],"tags":[{"name":"生活","slug":"生活","permalink":"https://zcheng.site/tags/生活/"}]},{"title":"2019年度总结","slug":"2019-summary","date":"2020-01-01T12:03:32.000Z","updated":"2020-04-06T09:35:59.772Z","comments":true,"path":"2019-summary.html","link":"","permalink":"https://zcheng.site/2019-summary.html","excerpt":"","text":"又是一年末，回顾这一年。有付出，有收获；有进步，也有不足。现就个人本年度重要工作情况总结如下： 一、底层框架升级在过去的一年里，我担任开发部技术一职，在部门主管带领及同事配合下，对主体系统框架进行了全面升级。其中主要包括“系统界面组件升级”与“系统权限功能升级”。通过对系统界面组件的不断优化和重写，展示与交互方面逐渐成熟稳定，呈现在用户面前的界面也更加友好。通过升级页面路由鉴权功能，可灵活的为不同的用户分配不同的访问权限，不同用户登录即可访问不同功能模块，满足不同用户需求的同时，也提升了系统模块通用性。为后续新产品开发节省了不少时间。具体受益系统有“质量舆情系统”、“后台数据管理系统”、“产品风险监测系统”、“爬虫管理系统”、“你点我抽后台管理系统”等。这些系统在新框架的驱动下，逐渐趋于稳定。 二、产品开发与设计这一年，开发部在公司领导牵头和部门主管带领下，从无到有完成了“产品风险监测系统”、“爬虫系统”和“爬虫管理系统”。以及初步完成开发的苏州监督抽查移动版和正在开发的比物鱼小程序。在这些产品开发过程中，我主要负责了系统框架搭建、技术选型以及技术难点的攻克、部分接口与页面实现。同时也参与了部分产品功能设计工作，站在用户角度思考问题，摸索用户需求，为产品完善提供了一己之力。 三、产品升级与维护在过去的一年里，我养成了记录每周工作情况的习惯，根据每周工作记录统计，产品升级与维护方面，一共记录了190条工作记录，主要体现在解决bug、便利性优化以及功能性升级上。这些升级与维护在满足用户需求的同时，也让系统更加稳定的运行。 四、总结与分析总结这一年的工作，有收获，也有不足。学到了许多新知识，也产生许多新问题，积累了一些感悟。必然有幼稚的地方，就当抛砖引玉： 养成良好的记录习惯 最开始的我是不做工作记录的，认为工作记录很多余，平时工作做到哪就是哪，没有明确的任务目标。后来随着工作越来越多，越来越复杂，发现到汇报工作的时候很难记得自己到底做了哪些工作，并且工作过程中任务目标很容易跑偏。后来我开始记录每周工作和平时学习计划，不仅可以温故知新，还养成了良好的工作习惯，自然而然的提高了工作效率。 提升硬实力的同时提升软实力 作为一名开发人员，无时无刻都在与代码打交道，随着代码越写越多，就会发现基本上大部分代码都在实现业务功能，做的东西基本上都是在借用别人的轮子。不是在重复其他公司已经非常成熟的代码，就是在重复公司内其他人的事情。一个项目做下来，可能有些东西自己都没搞懂，基本上没有什么成就感。所以作为一名程序员，首要任务就是提升自己的硬实力，硬实力就好比自己的专业能力与技能，不可或缺，并且需要不断的去获取新的知识来应对市场变化。这是程序员最基本的能力，但是往往还不够。随着时间推移，开发人员并不是每时每刻都在写代码，还得做一些其他事情，比如：写设计文档、开会、给其他同事解决问题等等。那么，脱离了代码似乎等于脱离了自己的专业领域，你可能会感到不适应与紧张，实际效果会大打折扣。所以，我觉得一个开发人员不应该仅仅只具备专业能力，也得具备一些软实力，比如：沟通能力，写作能力，组织能力等等。这些能力不仅仅对于一个程序员，对于每个人都很重要，也更能影响一个人的发展前景。 五、未来规划在日常工作中，遇到过两种问题，技术难点问题与业务能力问题。有些完美解决，总结写成博客进行记录。有些没有得到彻底解决，暂时搁置。针对这些遗留问题，结合我自身不足之处，将未来规划总结如下： 拥有持续的学习力 去年，我虽制定了学习计划，但并没有持之以恒的决心，完成情况不太满意。今年，我将量力而行，重新制定新的计划，踏踏实实提升自己，弥补自身缺陷。 提升产品设计能力 这一年，开发部全体成员在主管带领下，参与了部分产品功能与产品页面设计工作，在产品讨论会上，每个人都提出了自己宝贵的建议，也产生了许多新的想法，将这些想法串联起来，设计成一个产品，虽然过程是艰难且漫长的，但是结果总有收获。今年，我将提升产品设计能力，站在用户角度思考，调研用户需求，打造出更多有竞争力的产品。最后，感谢大家这一年以来的照顾，特别感谢领导的关心与给予的机会，让我得到了提升。也感谢主管与同事的指导和配合，让我学到了不少东西。 年关将至，大家新年快乐！","categories":[],"tags":[{"name":"总结","slug":"总结","permalink":"https://zcheng.site/tags/总结/"}]},{"title":"技术分享之机器学习","slug":"machine-learning","date":"2019-10-25T10:01:28.000Z","updated":"2020-01-20T02:54:28.749Z","comments":true,"path":"machine-learning.html","link":"","permalink":"https://zcheng.site/machine-learning.html","excerpt":"","text":"PPT下载技术分享之机器学习 The End😀","categories":[],"tags":[{"name":"技术分享","slug":"技术分享","permalink":"https://zcheng.site/tags/技术分享/"},{"name":"机器学习","slug":"机器学习","permalink":"https://zcheng.site/tags/机器学习/"}]},{"title":"Vue transition 折叠类动画自动获取隐藏层高度以及手风琴效果实现","slug":"vue-transition","date":"2019-07-13T04:37:58.000Z","updated":"2019-09-04T08:36:25.049Z","comments":true,"path":"vue-transition.html","link":"","permalink":"https://zcheng.site/vue-transition.html","excerpt":"","text":"前面要说的话前段时间，在解决左侧导航栏激活问题时，发现折叠动画过渡不是很平滑，并且还伴随着一些bug。使用起来不是很流畅，于是在解决完激活bug后，我决定把动画效果也解决掉。 先来看看要解决的问题，如下图：不知细心的你有没有发现什么问题？当点击折叠展开menu-one栏目的时候没有什么问题，但点击折叠展开mene-two栏目，当动画定格在menu-two-2选项的时候，menu-two-3及以下的部分直接立即完成了过渡。为什么会这样？下面说原因。 上图实现代码：12345678910111213141516&lt;!-- html部分 --&gt;&lt;transition name=\"sub-menu\"&gt; &lt;ul class=\"site-menu-sub\" v-show=\"item.children &amp;&amp; isOpen === aindex\"&gt; &lt;li v-for=\"(child, index) in item.children\" :key=\"index\" class=\"site-menu-item\"&gt; &lt;router-link class=\"animsition-link\" :to=\"`/$&#123;child.href&#125;`\"&gt; &lt;/router-link&gt; &lt;/li&gt; &lt;/ul&gt;&lt;/transition&gt; 123456789101112131415&lt;!-- css部分 --&gt;.site-menu-sub &#123; padding: 0px;&#125;.sub-menu-enter-active,.sub-menu-leave-active &#123; transition: all .3s ease; height: 70px; /* 这里70px为menu-one子菜单的高度 */&#125;.sub-menu-enter,.sub-menu-leave-to&#123; opacity: 0; height: 0px;&#125; 这里因为我把过渡完成时（完全展开时）的height设置为70px，height 从0 ~ 70px 之间完成了过渡，但高于70px的元素就会有问题，高度超出70px部分会立即完成过渡，没有平滑过渡效果。这里我设置的70px高度正好为muen-one展开的高度，这就是为什么menu-one展开折叠没问题，而menu-two会有问题。同样的，如果我把height设置为menu-two展开的高度（210px），那么menu-one展开折叠动画就会有问题。这里我不举例说明，可以自己尝试。 上面的例子能说明： 通过transition动画去控制变化元素高度或者宽度 多个折叠类元素高度或宽度不一样时，不能直接将高或宽写为固定值（写死）。 折叠类元素不确定高或宽的情况下，也不能直接将高或宽写为固定值（写死）。 折衷的解决方案：思路：通过max-height 或 max-width 去控制元素的最大高宽。 为什么叫折衷，因为有缺陷，具体看下面：看出问题来了吗？过渡效果好像变得很快，这是因为max-height设置成了1000px，不过比最开始那个效果要好一点。 折衷解决方案代码：123456789101112131415&lt;!-- css部分 --&gt;.site-menu-sub &#123; padding: 0px;&#125;.sub-menu-enter-active,.sub-menu-leave-active &#123; transition: all .3s ease; max-height: 1000px; /* 这里将最大高度设置为折叠元素不可能超越的高度 比如1000px */&#125;.sub-menu-enter,.sub-menu-leave-to&#123; opacity: 0; max-height: 0px;&#125; html代码部分没有改变，仅仅将height改为max-height了，并且将max-height设置为折叠元素不可能超越的高度。如果max-height设置的太小，比展开后元素高度低。那展开后样式会出现问题，展示不完全。并且这种解决方案没达到最完美效果，代码维护成本也大。 完美的解决方案：先放出效果图： 思路：通过JavaScript 钩子的方式获取隐藏层的高度，动态去改变隐藏层的高度 具体实现方案和代码如下：新建collapse-transition.js（名字自己定义）作为函数式组件被引用，代码如下：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253// collapse-transition.jsconst transitionStyle = '0.3s height ease-in-out';const Transition = &#123; beforeEnter(el) &#123; el.style.transition = transitionStyle; if (!el.dataset) el.dataset = &#123;&#125;; el.style.height = 0; &#125;, enter(el) &#123; if (el.scrollHeight !== 0) &#123; el.style.height = `$&#123;el.scrollHeight&#125;px`; &#125; else &#123; el.style.height = ''; &#125; el.style.overflow = 'hidden'; &#125;, afterEnter(el) &#123; el.style.transition = ''; el.style.height = ''; &#125;, beforeLeave(el) &#123; if (!el.dataset) el.dataset = &#123;&#125;; el.style.height = `$&#123;el.scrollHeight&#125;px`; el.style.overflow = 'hidden'; &#125;, leave(el) &#123; if (el.scrollHeight !== 0) &#123; el.style.transition = transitionStyle; el.style.height = 0; &#125; &#125;, afterLeave(el) &#123; el.style.transition = ''; el.style.height = ''; &#125;,&#125;;export default &#123; name: 'CollapseTransition', functional: true, render(h, &#123; children &#125;) &#123; const data = &#123; on: Transition, &#125;; return h('transition', data, children); &#125;,&#125;; 在需要的页面引入：12345678910&lt;!-- mune.vue页面 --&gt;&lt;script&gt; import CollapseTransition from '@/utils/collapse-transition'; // 本人将collapse-transition.js 放置在工具类utils文件夹 export default &#123; components: &#123; 'collapse-transition': CollapseTransition, &#125;, &#125;;&lt;/script&gt; 使用：12345678910111213141516&lt;!-- mune.vue页面 --&gt; &lt;collapse-transition&gt; &lt;ul class=\"site-menu-sub\" v-show=\"item.children &amp;&amp; isOpen === aindex\"&gt; &lt;li v-for=\"(child, index) in item.children\" :key=\"index\" class=\"site-menu-item\"&gt; &lt;router-link class=\"animsition-link\" :to=\"`/$&#123;child.href&#125;`\"&gt; &lt;/router-link&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/collapse-transition&gt; 之前的css删除，不再需要了。 到这一步自动获取元素高度的问题解决了，可以说是“一劳永逸”了。不管隐藏层高度多高，动画都没有问题。 手风琴模式过渡问题然而看似美好，实则新的问题一直伴随着我们。 不知你们发现了一个问题没，以上实现效果图有个过渡动画bug，就是手风琴模式（只保持一个子菜单的展开）过渡效果没出来。在menu-two展开状态下点击折叠的menu-one，我们发现menu-two直接关闭，而没有过渡动画。 解决方案：1234567// collapse-transition.jsbeforeLeave(el) &#123; if (!el.dataset) el.dataset = &#123;&#125;; el.style.display = 'block'; // 添加这一行 el.style.height = `$&#123;el.scrollHeight&#125;px`; el.style.overflow = 'hidden';&#125;, 在beforeLeave钩子中加入 display: &#39;block&#39; 如上图。 实现效果图： 到这里就彻底解决了vue transition折叠展开过渡动画的问题。 具体参考资料： vuejs如何实现这样的展开收起动画？ vue 官方中文文档-进入/离开 &amp; 列表过渡-JavaScript 钩子 element-ui collapse-transition动画源码 其他说明 gif录制过程中难免出现卡顿掉帧现象，本页面所有效果图不能代表实际实现效果。 gif录制软件ScreenToGif。 demo &amp; 项目地址 demo 项目地址 menu组件代码 transition动画代码 The End😀","categories":[],"tags":[{"name":"css","slug":"css","permalink":"https://zcheng.site/tags/css/"},{"name":"vue","slug":"vue","permalink":"https://zcheng.site/tags/vue/"},{"name":"transition","slug":"transition","permalink":"https://zcheng.site/tags/transition/"}]},{"title":"2018年终总结与规划","slug":"2018-summary","date":"2019-02-03T06:19:04.000Z","updated":"2019-08-15T08:40:23.576Z","comments":true,"path":"2018-summary.html","link":"","permalink":"https://zcheng.site/2018-summary.html","excerpt":"","text":"2018年已经过去，回首这一年，对我来说是颇有收获的一年。在这一年里，许多同事给予过我很多帮助，在这里感谢你们。个人技能也在平时不断试错踩坑的过程中得到了一定的提升。同时这一年也是值得深思的一年，思考自己在各方面还有哪些不足，反省自己在工作中的弊病。 这一年以来，从写demo到对接页面数据，慢慢理解了前后端分离的项目，自己前端代码书写能力也开始有了一定的提升；从只写前端到接触后端，开始对后端逻辑产生兴趣，不再仅仅局限于前端页面的编写，自己也开始能为前端提供数据接口，从完全不熟悉业务到慢慢熟悉业务，明白一个合格的程序员不应该仅仅只投入于技术，也应该熟悉项目与产品相关的东西，明白自己到底做的是什么，思考如何才能满足用户的需求，这样才能打造更好的产品。 工作：这一年，从搭建后台管理系统到现在，启用了数据爬虫，辅助人工采集数据，弥补了人工收集数据的短板；也优化了抽检流程，根据抽检链接自动爬取不合格企业数据，替代了人工收集数据的流程。现在的系统基本能为质量舆情做数据展现，数据采集，数据审核的数据管理功能。相较于以前的数据管理模式，便利性有了不小的提升。质量舆情系统功能也在不断的完善中，页面整体样式得到了优化，系统整体响应速度得到了提升。苏州系统也进行了优化，解决了诸多数据异常bug，增加了部分功能，改善了页面展示效果。高质量发展可视化系统指标数据收集、计算以及数据接口的提供。以上是我这一年工作的大概。通过这些，我认识到一个称职的开发人员应当具有良好的语言表达能力、扎实的技术能力、较强的逻辑处理能力、灵活的应变问题能力、有效的对外联系能力。 思想：1、在有扎实基础的前提下努力提升技术：现在技术更新换代很快，每隔一段时间都会有新的语言、框架、思想产生，通过学习最新的，先进的技术和思想，才不会被这个行业淘汰。2、善用工具：磨刀不误砍柴工，打造好自己的工具集非常重要。每个人都有自己的习惯，在日常工作中能够熟练的使用自己喜欢的工具和掌握一些运用技巧，能大大提高工作效率。3、过得去的英语：程序员这个职位无时无刻都在跟英文打交道，就连最基本的命名变量都是英文，基本所有技术文档都有英文而不一定有中文，所以具备一定的英文词汇量很有必要。4、良好的编码习惯：代码是给人阅读与维护的，维护者可能是别人也可能是自己。良好的代码规范，必要的、清晰的注释可以提升工作效率，也可以让维护者保持好的心情。5、写博客总结技术或感悟：写一篇好的博客很难，首先需要自己弄懂这些知识点，然后还要用代码把demo 写出来，最后，需要构思文章结构，如何用通俗易懂的文字写出来才能让其他人看懂，不过这些是很值得的。一些技术点，时间久了可能会忘记，以博客的形式写出来，会让我记忆更深刻。写博客不仅仅是我自己总结和沉淀技术，同时也会帮助其他开发者。更重要的能养成写作的习惯，还能熟悉搭建网站的流程。 自己的不足：1、沟通与交流方面：曾因不善表达导致工作汇报效果大打折扣，也因沟通不及时导致代码出过bug。2、持续学习方面：因为惰性，年初决定看完的五本书，到现在才看完一本。平时定下的计划也都没有按时完成，部分都搁置了。3、思想方面：平时不够自信，独立完成功能时总觉得自己完成不了，在多人协作时就觉得能完成。缺少思考，缺乏业务知识，对公司项目不够理解，难以深入去解读与开发功能。 未来：2018已经成为过去，2019年整装待发，为自己制定新的目标，同时也要去完成2018年未完成的目标。技术方面，打好基础，任何新的语言、框架、思想的产生都离不开基础知识，拥有扎实的基础能更容易理解新的东西；学好现有技术，理解技术思想。提升业务能力，业务对我这个只会敲击键盘的程序员来说，算是很陌生了。但通过这一年的工作，我明白业务的重要性，在开发过程中能清楚的明白业务，明白工作目的，就能思考如何才能做的更好，如何做出对客户来说合格的产品，而不是只追求快速实现功能。保持学习态度，提升硬实力的同时也要提升软实力，培养读书的兴趣，即便是带有功利性质的去读书，我相信也能收获良多。提升汇报沟通能力，阅读相关书籍，提升自信，保持良好的作息习惯，生活和工作平衡。 最后，祝愿公司越来越好，也希望自己也越来越好！ The End😀","categories":[],"tags":[{"name":"总结","slug":"总结","permalink":"https://zcheng.site/tags/总结/"}]},{"title":"js实现图片转换为Base64","slug":"phototobase64","date":"2018-12-12T09:19:52.000Z","updated":"2019-08-15T08:40:23.597Z","comments":true,"path":"phototobase64.html","link":"","permalink":"https://zcheng.site/phototobase64.html","excerpt":"","text":"Base64是一种基于64个可打印字符来表示二进制数据的表示方法。常用于在通常处理文本数据的场合，表示、传输、存储一些二进制数据，包括MIME的电子邮件及XML的一些复杂数据。 上传图片1&lt;input type=\"file\" class=\"form-control\" name=\"photo\" placeholder=\"图片\" @change=\"getFile($event)\"/&gt; 获取图片1234// 获取图片并调用deal()将图片转换为Base64getFile(event) &#123; this.deal(event.target.files[0])&#125;, 转换成Base64123456789101112131415161718deal(photo) &#123; // 判断支不支持FileReader if (!photo || !window.FileReader) &#123; alert('未选择图片或不支持上传图片！') &#125; // 判断上传的文件是否是图片格式 if (/^image/.test(photo.type)) &#123; //创建一个reader let reader = new FileReader(); //将图片转成base64格式 reader.readAsDataURL(photo); reader.onload = function() &#123; base64_photo = reader.result; // base64_photo是转换好的结果 &#125; &#125; else &#123; alert('请选择一张图片！'); &#125;&#125;, 注意事项 base64_photo在reader.onload函数中，而reader.onload又在deal函数中，形成闭包，所以在外部无法访问到base64_photo，想在外部引用base64_photo就要另辟蹊径 在这里提供一个方法，可以将base64_photo定义为全局变量，这样就能在函数外部访问到 12345// 全局变量与局部变量let base64_photo = ''; // 全局变量function a() &#123; let base64_photo = ''; // 局部变量&#125; The End😀","categories":[],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://zcheng.site/tags/javascript/"}]},{"title":"ssh key密钥生成与使用","slug":"sshkeys","date":"2018-08-09T04:23:41.000Z","updated":"2019-08-15T08:40:23.610Z","comments":true,"path":"sshkeys.html","link":"","permalink":"https://zcheng.site/sshkeys.html","excerpt":"","text":"生成密钥ssh key第一步在命令行输入以下命令来生成ssh key1ssh-keygen -t rsa 会出现以下信息：12Generating public/private rsa key pair.Enter file in which to save the key (/home/orange/.ssh/id_rsa): 以上信息告诉我们要输入一个文件名来存储ssh key，它的存储目录为/home/orange/.ssh/。（如果什么都不输入，那么文件名默认为id_rsa），这里我们使用默认文件名，直接按回车Enter进入下一步。 第二步会出现以下信息：(第3 ~ 4行出现的信息)1234Generating public/private rsa key pair.Enter file in which to save the key (/home/orange/.ssh/id_rsa):Created directory '/home/orange/.ssh'.Enter passphrase (empty for no passphrase): 以上信息告诉我们自动创建了目录/home/orange/.ssh来存储ssh key文件，然后需要为ssh key创建密码（什么都不输入，默认为无密码），这里我们不需要设置密码，直接按回车Enter进入下一步。 第三步会出现以下信息：(第5行出现的信息)12345Generating public/private rsa key pair.Enter file in which to save the key (/home/orange/.ssh/id_rsa):Created directory '/home/orange/.ssh'.Enter passphrase (empty for no passphrase):Enter same passphrase again: 直接回车Enter进入下一步。 第四步会出现以下信息：(第6 ~ 21行出现的信息)123456789101112131415161718192021Generating public/private rsa key pair.Enter file in which to save the key (/home/orange/.ssh/id_rsa):Created directory '/home/orange/.ssh'.Enter passphrase (empty for no passphrase):Enter same passphrase again:Your identification has been saved in /home/orange/.ssh/id_rsa.Your public key has been saved in /home/orange/.ssh/id_rsa.pub.The key fingerprint is:SHA256:wMJW8YgH0fYCbKwnE2qDuoviuoHxBVty11dbDotpU54 orange@orangeThe key's randomart image is:+---[RSA 2048]----+| oooo. + . || ..==o+ * B ||..o+Bo*.o * E . ||oo+B.+...o . ||+ o+. .S ||oo . ||o.. ||+. ||O+ |+----[SHA256]-----+ 到这一步，我们就生成了id_rsa，ssh key就储存在这个文件中。我们需要查看这个文件，把里面的内容复制到需要的地方。（github、 gitlab、 远程服务器等。） 查看id_rsa文件1cat ~/.ssh/id_rsa.pub 会出现类型以下信息：（id_rsa.pub文件内容）1234ssh-rsa AAAAB3NzaC1yc2EAAfR1V3LgCM/J/6fDTLXRhLv1GCxU3m4P09yRI6TNmDYDPrdu4lVS0ukSRZISmtzekcP4ra3KyXRa/npf4FztH2Peq+NiBlk5zCrgAd+sdXTcrtte1foVFrMa9vIZnrAGIAAAAB3NzaC1yc2EAAfR1V3LgCM/J/6fDTLXRhLv1GCxU3m4P09yRI6TNmDYDPrdu4lVS0ukSRZISmtzekcP4ra3KyXRa/npf4FztH2Peq+NiBlk5zCrgAd+sdXTcrtte1foVFrMa9vIZnrAGI orange@orange github配置 ssh key复制以上出现的一大串内容，粘贴到自己github里面，这样以后，在当前电脑上提交/拉取代码的时候就不再需要输入密码。（其他没有生成ssh key的电脑上需要输入密码）。具体见下图： gitlab配置 ssh key类似于github配置步骤，这里不再具体说明😜。 远程服务器配置ssh key免密码登录正常登录远程服务器流程：1ssh user@服务器ip地址 出现以下信息：1user@服务器ip地址's password: 输入正确密码才能登录上去。 接下来配置无密码登录先通过密码登录到服务器，然后：12cd ~/.ssh/vim authorized_keys 将ssh key粘贴进去，保存，退出重新登录即可不用输入密码。 The End😀","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"https://zcheng.site/tags/linux/"},{"name":"git","slug":"git","permalink":"https://zcheng.site/tags/git/"}]},{"title":"三河古镇一日游","slug":"Sanhe","date":"2018-07-06T07:38:22.000Z","updated":"2019-08-19T01:10:32.932Z","comments":true,"path":"Sanhe.html","link":"","permalink":"https://zcheng.site/Sanhe.html","excerpt":"","text":"二〇〇八年五月二十号(oﾟvﾟ)ノ 👣一次偶然的机会(亲姐姐出嫁;-)，让我有机会到安徽省合肥市肥西县–三河古镇。怎么去的？自驾游，全程高速，花了大概半天不到吧（从武汉到合肥—5个小时左右）。 👣本人全程大部分时间在睡觉（起床实在是太早!），不过也留意过车窗外的风景，大部分路段都盘延在青山间，这作为家乡是一览无余平原的博主还是很稀罕的。偶尔大山里有几户人家，小楼房安插在山腰间，有炊烟升起，又忽然觉得是大山里的云雾，很是迷幻。在山腰间总能看到一排排整整齐齐的“杂草”，就好奇“杂草”怎么能长的如此有规则。后来才了解到这是大山里的人们种的茶树。到了英山县（茶叶之乡），这种景象显得更为频繁了。大山里的茶树，吸收了大山的灵气，固然就神奇而出名了。❤(网上找了张图，因为只是经过英山，没有拍摄照片) 👣后来一路颠簸，终于到了。是一个小酒楼，看来是要吃饭了。心里一阵窃喜，正好肚子饿了。出门迎接我们的是亲家公和亲家母了，我们上了楼，过了许久，一桌子的菜才终于到齐了（菜：一家子就需要整整齐齐被吃掉）。 👣吃完了，休息片刻，去仰慕已久的三河古镇转一转吧？ 👣几个人走了几步远就到了三河古镇，我们没有从大门进去，而是选择从离我们比较近的侧门进去的。映入我们眼帘的是一条街，类似小吃街的那种，人还蛮多的，熙熙攘攘。两边的店铺卖的好像都是本地的特产。 👣景区里的护城河，清风拂柳，很是惬意。👣在附一张巷子👣好了，天不早了，该回去了。期待明天的我姐的婚礼😋。The End😀","categories":[],"tags":[{"name":"旅行","slug":"旅行","permalink":"https://zcheng.site/tags/旅行/"}]},{"title":"Windows10子系统Ubuntu体验","slug":"linux","date":"2018-06-21T02:03:20.000Z","updated":"2019-08-19T01:10:32.948Z","comments":true,"path":"linux.html","link":"","permalink":"https://zcheng.site/linux.html","excerpt":"","text":"Windows10更新到1709（或者更早）版本后，Windows10系统自带了一个linux子系统模块，如果你想换个环境写代码，体验体验Winodws10的子系统，就可以接着往下看 前提(必须) 1.Windows10版本在1709及以上即可 接下来教大家怎么去把玩这个系统👍 1.先进入“控制面板”=&gt;“程序”=&gt;“启用或关闭Windows功能”=&gt;找到“适用于Linux的Windows子系统”=&gt;选中（前面打勾）=&gt;确定, 然后重启电脑。 见下图: 2.重启完毕后打开Windows10自带的应用商店，搜索“ubuntu”，找到下载。等下载完毕后打开，窗口会提示installing(正在安装)，等待几分钟。然后会提示输入用户名和密码，输入你喜欢的用户名和密码即可。 见下图: 你已经安装完子系统，接下来去配置它，让它能够满足日常开发需求并且与Windows完美协作。 1.安装node.js 按照下面依次执行 (参照官方文档) 请注意每一步是否执行成功，否则检查每一步！12$ curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -$ sudo apt-get install -y nodejs 2.安装git 按照下面执行(参照官方文档)1$ sudo apt-get install git 3.（非必须）当然，如果你要玩个人网站(hexo博客等）需要安装hexo(参照官方文档)1$ npm install -g hexo-cli 到这一步，你已经具备了开发环境所必要的工具和包，并且可以通过git拉取代码进行开发了，至于子系统的图形界面，你可以把Windows10作为子系统图形界面进行操作 4.通过下面命令进入Windows目录1$ cd /mnt 5.拉取下来的项目可以随便放在你喜欢的磁盘（C、D、E、F…），通过Windows下的编程工具进行开发(like: Sublime_Text3等) The End😀","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"https://zcheng.site/tags/linux/"},{"name":"工具","slug":"工具","permalink":"https://zcheng.site/tags/工具/"}]},{"title":"hexo一键部署到云服务器","slug":"hexo-deploy","date":"2018-05-01T03:44:37.000Z","updated":"2020-04-06T09:35:59.813Z","comments":true,"path":"hexo-deploy.html","link":"","permalink":"https://zcheng.site/hexo-deploy.html","excerpt":"","text":"上一篇记录了如何搭建一个简易的个人网站，采用hexo，github pages进行搭建与部署。本篇主要记录下如何将hexo博客部署到非github pages的第三方云服务器上，并实现一键部署。 以下本地操作均在Ubuntu 18.04.1 LTS中进行测试。以下云服务器上操作在阿里云Ubuntu 16.04.4 LTS \\n \\l中进行测试。 准备工作 一台云服务器（阿里云、腾讯云等） 已有hexo博客框架搭建的博客（具体可参考我上一篇记录文章） # 传统部署方法打包本地hexo博客项目，上传到云服务器上，再配置nginx。打包生成静态文件1$ hexo generate 把根目录下生成的public文件夹压缩上传到云服务器根目录下1234# 压缩成html.zip$ zip -q -r html.zip public# 将html.zip上传到云服务器$ scp html.zip 用户名@服务器公网ip:~ 服务器上解压文件123456789# 先登录自己的服务器$ ssh 用户名@服务器公网ip# 找到刚上传上来的html.zip并解压缩，我这里把解压缩的文件放在/var/www/blog/下面$ cd /var/www$ sudo mkdir blog$ cd blog$ sudo cp ~/html.zip .$ sudo unzip html.zip# 得到public文件 配置nginx如果你服务器上已经安装了nginx，直接看下面。否则参考nginx的安装与配置启动ngxin，正常安装完成后默认已经启动1$ sudo nginx 浏览器访问服务器ip查看nginx是否安装并启动。出现Welcome to nginx!字样说明启动成功，否则自行搜索解决问题。 现在配置hexo博客nginx1234# nginx配置文件在/etc/nginx下$ cd /etc/nginx/sites-enabled# 文件夹下有default文件，是默认配置文件，修改它$ sudo vim default 打开以后如下图显示修改红框标注的地方为你之前解压html.zip的目录，即/var/www/blog/public。保存退出，重载nginx。1$ sudo nginx -s reload 再次访问访问服务器ip，现在应该出现的是你博客主页了。 以上是平时常见的部署方式，容易理解。但是过程复杂，每次更新博客需要重新部署，重复以上繁杂操作。接下来介绍一种一劳永逸的部署方式 # 一劳永逸的一键部署方式原理与思路 类似于hexo博客一键部署功能，利用hexo d命令完成部署。 借助git完成部署，在服务器上建立一个git仓库，通过命令把代码提交到git仓库，并且触发git hooks配置bash命令自动执行完成目录拷贝。说白了，就是常见的部署方式自动化执行的过程。 第一步，在服务器上创建仓库123$ mkdir blog.git$ cd blog.git$ git init --bare 如果提示git不存在，请先安装git，否则进行下一步。 第二步，设置自动部署钩子，也就是配置git hooks进入hooks目录下，创建post-receive钩子文件12$ cd hooks$ touch post-receive 编辑post-receive1$ sudo vim post-receive 输入以下内容，并保存退出1234567GIT_REPO=/var/www/blog.gitTMP_GIT_CLONE=/var/www/tmp/blogPUBLIC_WWW=/var/www/blogrm -rf $&#123;TMP_GIT_CLONE&#125;git clone $GIT_REPO $TMP_GIT_CLONErm -rf $&#123;PUBLIC_WWW&#125;/*cp -rf $&#123;TMP_GIT_CLONE&#125;/ $&#123;PUBLIC_WWW&#125; 配置解释： GIT_REPO： 服务器git仓库所在目录，此目录并不放博客项目。 TMP_GIT_CLONE： 临时目录，git会将提交的文件先存到临时目录。 PUBLIC_WWW： 服务器上放博客项目的目录，你想将博客放在哪，修改此项即可。 注意此目录应对于nginx root设置的目录。 下面四行即为bash命令，设置好就会自动执行。 注意： 上述文件出现的/var/www为根目录，这里是我个人配置。供参考，具体自行修改设置。 修改目录权限12$ chmod +x post-receive$ chmod 777 -R /var/www/blog 第三步，修改本地博客配置打开项目文件，找到_config.yml打开，找到deploy配置进行修改。12345deploy: type: git message: update pages repo: username@xx.xx.xxx.xx:/var/www/blog.git branch: master 这里的repo配置是服务器地址配置。冒号后面对应的是上一步设置的仓库目录地址。branch是git分支。 修改好后执行hexo g进行编译，再执行hexo d进行部署。 提示输入密码，这里输入服务器登录密码即可。出现以下信息部署完成：12Branch &apos;master&apos; set up to track remote branch &apos;master&apos; from &apos;xx@xx.xx.xxx:/var/www/blog.git&apos;.INFO Deploy done: git The End😀","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://zcheng.site/tags/hexo/"},{"name":"blog","slug":"blog","permalink":"https://zcheng.site/tags/blog/"}]},{"title":"如何搭建一个简易的个人网站","slug":"hexo-build","date":"2018-04-10T04:46:50.000Z","updated":"2020-04-06T09:35:59.807Z","comments":true,"path":"hexo-build.html","link":"","permalink":"https://zcheng.site/hexo-build.html","excerpt":"","text":"以下全部操作均在Ubuntu 18.04.1 LTS中进行测试。 先做好准备工作安装工具所需要的工具： node.js、hexo、git，如你已经安装，跳过这一步。 安装node.js1$ node -v 如果提示命令没找到，按照下面进行安装，否者跳过这一步。我这里安装的是12.x版本，安装其他版本参见链接 12$ curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -$ sudo apt-get install -y nodejs 安装hexo1$ hexo -v 如果提示命令没找到，按照下面进行安装，否者跳过这一步。 1$ npm install -g hexo-cli 安装git1$ git --version 如果提示命令没找到，按照下面进行安装，否者跳过这一步。 1$ sudo apt-get install git 开始搭建博客1. 注册一个github账号（有账号跳过这一步）注册地址 2. 新建一个repository如下图所示 点击New repository后会出现 注意这里的Repository name文本框。黄色框起来的username你可以随便取名。浅蓝色框起来的github.io必须得填github.io。也就是形式得是username.github.io。至于为什么，具体看官方说明。 其他的自己看着填入即可。 3. 拉取repository到本地电脑 12345678910111213# 拉取username.github.io.git到本地$ git clone https://github.com/czorange123/username.github.io.git# 等待克隆完毕后$ cd username.github.io.git# 新建一个hexo项目$ hexo init blog# 等待执行完毕，会生成一个blog文件夹，里面就是我们的博客项目文件了# 将.git文件夹复制到blog文件夹下，这一步是为了将blog项目提交的github上去$ cd blog$ cp -r ../.git/ .# 测试hexo博客是否创建成功$ hexo generate$ hexo server 出现如下信息说明搭建成功 INFO Start processing INFO Hexo is running at http://localhost:4000 . Press Ctrl+C to stop. 项目默认运行在4000端口，点击地址即可访问。 4. 将项目提交到github为了能使用github提供的github pages，我们需要将项目提交到github 123456# 在blog目录下$ git status$ git add .$ git commit -m\"init hexo-blog\"$ git push# 提示输入github用户名和密码，而后即可提交上去 提交上去后github上项目是这样的 5. 部署项目使用编辑器打开项目（blog）文件夹，在根目录下找到_config.yml文件，修改deploy配置，如下 修改root配置 修改deploy配置 然后开始部署 123456# 在blog目录下# 先安装部署用的包$ npm install hexo-deployer-git --save# 等待安装完毕后$ hexo deploy# 提示输入github用户名和密码，而后即可部署上去 6. 在线访问打开github刚提交的项目，点击settings，如下 往下滚动找到GitHub Pages 通过链接即可访问部署好的博客 相关文档 &amp; 资料 hexo官方中文文档 Markdown 语法介绍 demo &amp; 项目地址 demo在线地址 项目地址 The End😀","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://zcheng.site/tags/hexo/"},{"name":"blog","slug":"blog","permalink":"https://zcheng.site/tags/blog/"}]},{"title":"“Windows下sublime 安装GitGutter插件无法正常使用”的问题","slug":"second","date":"2018-03-28T11:18:18.000Z","updated":"2019-08-15T08:40:23.604Z","comments":true,"path":"second.html","link":"","permalink":"https://zcheng.site/second.html","excerpt":"","text":"前几日开始使用windows下的子系统，在sublime安装“GitGutter插件”时，Gitgutter 控制台遇到:git -veision [WinError 2] “无法找到指定文件” 想了想，应该是安装成功，没有配置的问题。接下来进入正题： 1.安装git,去官网下载windows版本git =&gt; git官网 2.安装过程，全部下一步。 3.进入sublime =&gt; Preferrences =&gt; Package Settings 然后选择GitGutter =&gt; settings 4.在出现的窗口右边大括号里加上： 1&quot;git_binary&quot;: &quot;D:\\\\Program Files (x86)\\\\Git\\\\bin\\\\git.exe&quot;注意：后面的路径是你刚刚安装的git 的bin路径，替换即可，路径分隔符是’\\\\’双斜线。 重启sublime，你的问题应该得到了解决。The End😀","categories":[],"tags":[{"name":"工具","slug":"工具","permalink":"https://zcheng.site/tags/工具/"},{"name":"sublime","slug":"sublime","permalink":"https://zcheng.site/tags/sublime/"}]},{"title":"Windows10子系统linux“无法访问此网站，localhost 拒绝了我们的连接请求”。","slug":"orange","date":"2018-03-27T16:00:00.000Z","updated":"2019-08-15T08:40:23.591Z","comments":true,"path":"orange.html","link":"","permalink":"https://zcheng.site/orange.html","excerpt":"","text":"作者遇到的这个问题是出现在windows10 linux子系统上的，所以可能只适用以下情况 windows10子系统linux运行服务 执行”hexo s”运行我的hexo博客，并提示服务已运行在”localhost:4000”，如下： 当我访问”localhost:4000”时，却出现“无法访问此网站，localhost 拒绝了我们的连接请求。” 后来查了github上的issues，发现这个问题是电脑上某些软件导致的，tx的wegame的锅，不过tx官方表示会尽快修复，临时解决办法请点击issues，按照官方的方法解决，或者直接卸载wegame，问题应该可以解决。 The End😀","categories":[],"tags":[{"name":"服务","slug":"服务","permalink":"https://zcheng.site/tags/服务/"},{"name":"系统","slug":"系统","permalink":"https://zcheng.site/tags/系统/"}]}]}